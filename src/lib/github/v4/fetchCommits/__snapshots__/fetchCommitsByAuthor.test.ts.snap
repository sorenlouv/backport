// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fetchCommitsByAuthor when commit has an associated pull request should call with correct args to fetch author id 1`] = `
[
  {
    "operationName": "AuthorId",
    "query": "query AuthorId($author: String!) {
  user(login: $author) {
    id
  }
}",
    "variables": {
      "author": "sorenlouv",
    },
  },
]
`;

exports[`fetchCommitsByAuthor when commit has an associated pull request should call with correct args to fetch commits 1`] = `
[
  {
    "operationName": "CommitsByAuthor",
    "query": "query CommitsByAuthor($authorId: ID, $commitPath: String, $dateSince: GitTimestamp, $dateUntil: GitTimestamp, $maxNumber: Int!, $repoName: String!, $repoOwner: String!, $sourceBranch: String!) {
  repository(owner: $repoOwner, name: $repoName) {
    ref(qualifiedName: $sourceBranch) {
      target {
        ... on Commit {
          __typename
          history(
            first: $maxNumber
            author: {id: $authorId}
            path: $commitPath
            since: $dateSince
            until: $dateUntil
          ) {
            edges {
              node {
                __typename
                ...SourceCommitWithTargetPullRequestFragment
              }
            }
          }
        }
      }
    }
  }
}
fragment RemoteConfigHistoryFragment on Commit {
  remoteConfigHistory: history(first: 1, path: 
".backportrc.json") {
    edges {
      remoteConfig: node {
        committedDate
        file(path: 
".backportrc.json") {
          ... on TreeEntry {
            __typename
            object {
              ... on Blob {
                __typename
                text
              }
            }
          }
        }
      }
    }
  }
}
fragment SourceCommitWithTargetPullRequestFragment on Commit {
  __typename
  repository {
    name
    owner {
      login
    }
  }
  sha: oid
  message
  committedDate
  author {
    name
    email
  }
  associatedPullRequests(first: 1) {
    edges {
      node {
        title
        url
        number
        labels(first: 50) {
          nodes {
            name
          }
        }
        baseRefName
        mergeCommit {
          __typename
          ...RemoteConfigHistoryFragment
          sha: oid
          message
        }
        timelineItems(last: 20, itemTypes: CROSS_REFERENCED_EVENT) {
          edges {
            node {
              ... on CrossReferencedEvent {
                __typename
                targetPullRequest: source {
                  __typename
                  ... on PullRequest {
                    __typename
                    targetMergeCommit: mergeCommit {
                      sha: oid
                      message
                    }
                    repository {
                      name
                      owner {
                        login
                      }
                    }
                    url
                    title
                    state
                    baseRefName
                    number
                    commits(first: 20) {
                      edges {
                        node {
                          targetCommit: commit {
                            message
                            sha: oid
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}",
    "variables": {
      "authorId": "myUserId",
      "commitPath": null,
      "dateSince": null,
      "dateUntil": null,
      "maxNumber": 10,
      "repoName": "kibana",
      "repoOwner": "elastic",
      "sourceBranch": "source-branch-from-options",
    },
  },
]
`;
