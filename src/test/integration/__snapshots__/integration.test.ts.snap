// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integration when a single commit is backported should make correct API requests 1`] = `
Array [
  Object {
    "query": "
  query GithubConfigOptions($repoOwner: String!, $repoName: String!) {
    repository(owner: $repoOwner, name: $repoName) {
      isFork
      ...UpstreamInfo
      parent {
        ...UpstreamInfo
        owner {
          login
        }
      }
    }
  }

  fragment UpstreamInfo on Repository {
    id
    ref(qualifiedName: \\"refs/heads/7.x\\") {
      name
    }
    defaultBranchRef {
      name
      target {
        ...JSONConfigFile
      }
    }
  }

  fragment JSONConfigFile on Commit {
    jsonConfigFile: history(first: 1, path: \\".backportrc.json\\") {
      edges {
        config: node {
          committedDate
          file(path: \\".backportrc.json\\") {
            ... on TreeEntry {
              object {
                ... on Blob {
                  text
                }
              }
            }
          }
        }
      }
    }
  }
",
    "variables": Object {
      "repoName": "backport-demo",
      "repoOwner": "backport-org",
    },
  },
]
`;

exports[`integration when a single commit is backported should make correct API requests 2`] = `
Array [
  Object {
    "query": "
    query AuthorId($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
    "variables": Object {
      "login": "sqren",
    },
  },
]
`;

exports[`integration when a single commit is backported should make correct API requests 3`] = `
Array [
  Object {
    "query": "
    query CommitsByAuthor(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
      $historyPath: String
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              history(
                first: $maxNumber
                author: { id: $authorId }
                path: $historyPath
              ) {
                edges {
                  node {
                    oid
                    message
                    associatedPullRequests(first: 1) {
                      edges {
                        node {
                          ...ExistingTargetPullRequests
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    
  fragment ExistingTargetPullRequests on PullRequest {
    # Source PR
    number
    repository {
      name
      owner {
        login
      }
    }
    mergeCommit {
      oid
      message
    }
    labels(first: 50) {
      nodes {
        name
      }
    }
    baseRefName
    timelineItems(last: 20, itemTypes: CROSS_REFERENCED_EVENT) {
      edges {
        node {
          ... on CrossReferencedEvent {
            source {
              __typename

              # Target PRs
              ... on PullRequest {
                title
                state
                baseRefName
                number
                commits(first: 20) {
                  edges {
                    node {
                      commit {
                        message
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  ",
    "variables": Object {
      "authorId": "sqren_author_id",
      "historyPath": null,
      "maxNumber": 10,
      "repoName": "backport-demo",
      "repoOwner": "backport-org",
      "sourceBranch": "master",
    },
  },
]
`;

exports[`integration when two commits are backported should make correct API requests 1`] = `
Array [
  Object {
    "query": "
  query GithubConfigOptions($repoOwner: String!, $repoName: String!) {
    repository(owner: $repoOwner, name: $repoName) {
      isFork
      ...UpstreamInfo
      parent {
        ...UpstreamInfo
        owner {
          login
        }
      }
    }
  }

  fragment UpstreamInfo on Repository {
    id
    ref(qualifiedName: \\"refs/heads/7.x\\") {
      name
    }
    defaultBranchRef {
      name
      target {
        ...JSONConfigFile
      }
    }
  }

  fragment JSONConfigFile on Commit {
    jsonConfigFile: history(first: 1, path: \\".backportrc.json\\") {
      edges {
        config: node {
          committedDate
          file(path: \\".backportrc.json\\") {
            ... on TreeEntry {
              object {
                ... on Blob {
                  text
                }
              }
            }
          }
        }
      }
    }
  }
",
    "variables": Object {
      "repoName": "backport-demo",
      "repoOwner": "backport-org",
    },
  },
]
`;

exports[`integration when two commits are backported should make correct API requests 2`] = `
Array [
  Object {
    "query": "
    query AuthorId($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
    "variables": Object {
      "login": "sqren",
    },
  },
]
`;

exports[`integration when two commits are backported should make correct API requests 3`] = `
Array [
  Object {
    "query": "
    query CommitsByAuthor(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
      $historyPath: String
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              history(
                first: $maxNumber
                author: { id: $authorId }
                path: $historyPath
              ) {
                edges {
                  node {
                    oid
                    message
                    associatedPullRequests(first: 1) {
                      edges {
                        node {
                          ...ExistingTargetPullRequests
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    
  fragment ExistingTargetPullRequests on PullRequest {
    # Source PR
    number
    repository {
      name
      owner {
        login
      }
    }
    mergeCommit {
      oid
      message
    }
    labels(first: 50) {
      nodes {
        name
      }
    }
    baseRefName
    timelineItems(last: 20, itemTypes: CROSS_REFERENCED_EVENT) {
      edges {
        node {
          ... on CrossReferencedEvent {
            source {
              __typename

              # Target PRs
              ... on PullRequest {
                title
                state
                baseRefName
                number
                commits(first: 20) {
                  edges {
                    node {
                      commit {
                        message
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  ",
    "variables": Object {
      "authorId": "sqren_author_id",
      "historyPath": null,
      "maxNumber": 10,
      "repoName": "backport-demo",
      "repoOwner": "backport-org",
      "sourceBranch": "master",
    },
  },
]
`;
