// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integration when a single commit is backported should make correct API requests 1`] = `
Array [
  Object {
    "query": "
  query GithubConfigOptions($repoOwner: String!, $repoName: String!) {
    repository(owner: $repoOwner, name: $repoName) {
      isFork
      ...Repo
      parent {
        ...Repo
      }
    }
  }

  fragment Repo on Repository {
    # check to see if a branch named \\"backport\\" exists
    ref(qualifiedName: \\"refs/heads/backport\\") {
      name
    }
    defaultBranchRef {
      name
      target {
        ...JSONConfigFile
      }
    }
  }

  fragment JSONConfigFile on Commit {
    jsonConfigFile: history(first: 1, path: \\".backportrc.json\\") {
      edges {
        config: node {
          committedDate
          file(path: \\".backportrc.json\\") {
            ... on TreeEntry {
              object {
                ... on Blob {
                  text
                }
              }
            }
          }
        }
      }
    }
  }
",
    "variables": Object {
      "repoName": "backport-demo",
      "repoOwner": "backport-org",
    },
  },
]
`;

exports[`integration when a single commit is backported should make correct API requests 2`] = `
Array [
  Object {
    "query": "
    query AuthorId($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
    "variables": Object {
      "login": "sqren",
    },
  },
]
`;

exports[`integration when a single commit is backported should make correct API requests 3`] = `
Array [
  Object {
    "query": "
    query CommitsByAuthor(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              
  _0: history(
    first: $maxNumber
    author: { id: $authorId }
    
  ) {
    edges {
      node {
       ...SourceCommitWithTargetPullRequest
      }
    }
  }
            }
          }
        }
      }
    }

    
    fragment InnerCommitNode on Commit {
      repository {
        name
        owner {
          login
        }
      }
      oid
      message
      committedDate
    }

    fragment SourceCommitWithTargetPullRequest on Commit {
      ...InnerCommitNode
      associatedPullRequests(first: 1) {
        edges {
          node {
            # Source PR
            number
            labels(first: 50) {
              nodes {
                name
              }
            }
            baseRefName
            timelineItems(last: 20, itemTypes: CROSS_REFERENCED_EVENT) {
              edges {
                node {
                  ... on CrossReferencedEvent {
                    targetPullRequest: source {
                      __typename

                      # Target PRs
                      ... on PullRequest {
                        title
                        state
                        baseRefName
                        number
                        commits(first: 20) {
                          edges {
                            node {
                              targetCommit: commit {
                                ...InnerCommitNode
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  
  ",
    "variables": Object {
      "authorId": "sqren_author_id",
      "maxNumber": 10,
      "repoName": "backport-demo",
      "repoOwner": "backport-org",
      "sourceBranch": "master",
    },
  },
]
`;

exports[`integration when two commits are backported should make correct API requests 1`] = `
Array [
  Object {
    "query": "
  query GithubConfigOptions($repoOwner: String!, $repoName: String!) {
    repository(owner: $repoOwner, name: $repoName) {
      isFork
      ...Repo
      parent {
        ...Repo
      }
    }
  }

  fragment Repo on Repository {
    # check to see if a branch named \\"backport\\" exists
    ref(qualifiedName: \\"refs/heads/backport\\") {
      name
    }
    defaultBranchRef {
      name
      target {
        ...JSONConfigFile
      }
    }
  }

  fragment JSONConfigFile on Commit {
    jsonConfigFile: history(first: 1, path: \\".backportrc.json\\") {
      edges {
        config: node {
          committedDate
          file(path: \\".backportrc.json\\") {
            ... on TreeEntry {
              object {
                ... on Blob {
                  text
                }
              }
            }
          }
        }
      }
    }
  }
",
    "variables": Object {
      "repoName": "backport-demo",
      "repoOwner": "backport-org",
    },
  },
]
`;

exports[`integration when two commits are backported should make correct API requests 2`] = `
Array [
  Object {
    "query": "
    query AuthorId($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
    "variables": Object {
      "login": "sqren",
    },
  },
]
`;

exports[`integration when two commits are backported should make correct API requests 3`] = `
Array [
  Object {
    "query": "
    query CommitsByAuthor(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              
  _0: history(
    first: $maxNumber
    author: { id: $authorId }
    
  ) {
    edges {
      node {
       ...SourceCommitWithTargetPullRequest
      }
    }
  }
            }
          }
        }
      }
    }

    
    fragment InnerCommitNode on Commit {
      repository {
        name
        owner {
          login
        }
      }
      oid
      message
      committedDate
    }

    fragment SourceCommitWithTargetPullRequest on Commit {
      ...InnerCommitNode
      associatedPullRequests(first: 1) {
        edges {
          node {
            # Source PR
            number
            labels(first: 50) {
              nodes {
                name
              }
            }
            baseRefName
            timelineItems(last: 20, itemTypes: CROSS_REFERENCED_EVENT) {
              edges {
                node {
                  ... on CrossReferencedEvent {
                    targetPullRequest: source {
                      __typename

                      # Target PRs
                      ... on PullRequest {
                        title
                        state
                        baseRefName
                        number
                        commits(first: 20) {
                          edges {
                            node {
                              targetCommit: commit {
                                ...InnerCommitNode
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  
  ",
    "variables": Object {
      "authorId": "sqren_author_id",
      "maxNumber": 10,
      "repoName": "backport-demo",
      "repoOwner": "backport-org",
      "sourceBranch": "master",
    },
  },
]
`;
