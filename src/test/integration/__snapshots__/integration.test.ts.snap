// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when a single commit is backported should make correct API requests 1`] = `
Array [
  Object {
    "query": "
    query DefaultRepoBranch($repoOwner: String!, $repoName: String!) {
      viewer {
        login
      }
      repository(owner: $repoOwner, name: $repoName) {
        # check whether \\"backport\\" branch exists
        ref(qualifiedName: \\"refs/heads/backport\\") {
          name
        }

        # get default branch
        defaultBranchRef {
          name
        }
      }
    }
  ",
    "variables": Object {
      "repoName": "backport-demo",
      "repoOwner": "elastic",
    },
  },
]
`;

exports[`when a single commit is backported should make correct API requests 2`] = `
Array [
  Object {
    "query": "
    query AuthorId($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
    "variables": Object {
      "login": "sqren",
    },
  },
]
`;

exports[`when a single commit is backported should make correct API requests 3`] = `
Array [
  Object {
    "query": "
    query CommitsByAuthor(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
      $historyPath: String
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              history(
                first: $maxNumber
                author: { id: $authorId }
                path: $historyPath
              ) {
                edges {
                  node {
                    oid
                    message
                    associatedPullRequests(first: 1) {
                      edges {
                        node {
                          repository {
                            owner {
                              login
                            }
                            name
                          }
                          number
                          mergeCommit {
                            oid
                          }
                          labels(first: 50) {
                            nodes {
                              name
                            }
                          }
                          timelineItems(
                            last: 20
                            itemTypes: CROSS_REFERENCED_EVENT
                          ) {
                            edges {
                              node {
                                ... on CrossReferencedEvent {
                                  source {
                                    __typename
                                    ... on PullRequest {
                                      title
                                      state
                                      baseRefName
                                      commits(first: 20) {
                                        edges {
                                          node {
                                            commit {
                                              message
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ",
    "variables": Object {
      "authorId": "sqren_author_id",
      "historyPath": null,
      "maxNumber": 10,
      "repoName": "backport-demo",
      "repoOwner": "elastic",
      "sourceBranch": "master",
    },
  },
]
`;

exports[`when two commits are backported should make correct API requests 1`] = `
Array [
  Object {
    "query": "
    query DefaultRepoBranch($repoOwner: String!, $repoName: String!) {
      viewer {
        login
      }
      repository(owner: $repoOwner, name: $repoName) {
        # check whether \\"backport\\" branch exists
        ref(qualifiedName: \\"refs/heads/backport\\") {
          name
        }

        # get default branch
        defaultBranchRef {
          name
        }
      }
    }
  ",
    "variables": Object {
      "repoName": "backport-demo",
      "repoOwner": "elastic",
    },
  },
]
`;

exports[`when two commits are backported should make correct API requests 2`] = `
Array [
  Object {
    "query": "
    query AuthorId($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
    "variables": Object {
      "login": "sqren",
    },
  },
]
`;

exports[`when two commits are backported should make correct API requests 3`] = `
Array [
  Object {
    "query": "
    query CommitsByAuthor(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
      $historyPath: String
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              history(
                first: $maxNumber
                author: { id: $authorId }
                path: $historyPath
              ) {
                edges {
                  node {
                    oid
                    message
                    associatedPullRequests(first: 1) {
                      edges {
                        node {
                          repository {
                            owner {
                              login
                            }
                            name
                          }
                          number
                          mergeCommit {
                            oid
                          }
                          labels(first: 50) {
                            nodes {
                              name
                            }
                          }
                          timelineItems(
                            last: 20
                            itemTypes: CROSS_REFERENCED_EVENT
                          ) {
                            edges {
                              node {
                                ... on CrossReferencedEvent {
                                  source {
                                    __typename
                                    ... on PullRequest {
                                      title
                                      state
                                      baseRefName
                                      commits(first: 20) {
                                        edges {
                                          node {
                                            commit {
                                              message
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ",
    "variables": Object {
      "authorId": "sqren_author_id",
      "historyPath": null,
      "maxNumber": 10,
      "repoName": "backport-demo",
      "repoOwner": "elastic",
      "sourceBranch": "master",
    },
  },
]
`;
