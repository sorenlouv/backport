// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when a multiple commits are backported should make correct API requests 1`] = `
Object {
  "query": "
    query getIdByLogin($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
  "variables": Object {
    "login": "sqren",
  },
}
`;

exports[`when a multiple commits are backported should make correct API requests 2`] = `
Object {
  "query": "
    query getCommitsByAuthorQuery(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
      $historyPath: String
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              history(
                first: $maxNumber
                author: { id: $authorId }
                path: $historyPath
              ) {
                edges {
                  node {
                    oid
                    message
                    associatedPullRequests(first: 1) {
                      edges {
                        node {
                          repository {
                            owner {
                              login
                            }
                            name
                          }
                          number
                          mergeCommit {
                            oid
                          }
                          labels(first: 50) {
                            nodes {
                              name
                            }
                          }
                          timelineItems(
                            last: 20
                            itemTypes: CROSS_REFERENCED_EVENT
                          ) {
                            edges {
                              node {
                                ... on CrossReferencedEvent {
                                  source {
                                    __typename
                                    ... on PullRequest {
                                      title
                                      state
                                      baseRefName
                                      commits(first: 20) {
                                        edges {
                                          node {
                                            commit {
                                              message
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ",
  "variables": Object {
    "authorId": "sqren_author_id",
    "historyPath": null,
    "maxNumber": 10,
    "repoName": "backport-demo",
    "repoOwner": "elastic",
    "sourceBranch": "master",
  },
}
`;

exports[`when a multiple commits are backported should make correct API requests 3`] = `
Object {
  "base": "6.0",
  "body": "Backports the following commits to 6.0:
 - Add witch (#85)
 - Add ðŸ‘» (2e63475c)",
  "head": "sqren:backport/6.0/pr-85_commit-2e63475c",
  "title": "[6.0] Add witch (#85) | Add ðŸ‘» (2e63475c)",
}
`;

exports[`when a single commit is backported should call logger correctly 1`] = `
Array [
  Array [
    "[INFO] POST https://api.github.com/graphql (status: 200)",
    undefined,
  ],
  Array [
    "[VERBOSE] Query:",
    "
    query getDefaultRepoBranchAndPerformStartupChecks(
      $repoOwner: String!
      $repoName: String!
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        # check whether \\"backport\\" branch exists
        ref(qualifiedName: \\"refs/heads/backport\\") {
          name
        }

        # get default branch
        defaultBranchRef {
          name
        }
      }
    }
  ",
  ],
  Array [
    "[VERBOSE] Variables:",
    Object {
      "repoName": "backport-demo",
      "repoOwner": "elastic",
    },
  ],
  Array [
    "[DEBUG] Response headers:",
    Object {
      "custom-header": "foo",
    },
  ],
  Array [
    "[VERBOSE] Response data:",
    Object {
      "data": Object {
        "repository": Object {
          "defaultBranchRef": Object {
            "name": "master",
          },
        },
      },
    },
  ],
  Array [
    "[VERBOSE] Backport options",
    Object {
      "accessToken": "myAccessToken",
      "all": false,
      "assignees": Array [],
      "author": "sqren",
      "autoFixConflicts": undefined,
      "branchLabelMapping": undefined,
      "ci": false,
      "dryRun": false,
      "editor": undefined,
      "fork": true,
      "gitHostname": "github.com",
      "githubApiBaseUrlV3": "https://api.github.com",
      "githubApiBaseUrlV4": "https://api.github.com/graphql",
      "maxNumber": 10,
      "multipleBranches": true,
      "multipleCommits": false,
      "noVerify": true,
      "path": undefined,
      "prDescription": undefined,
      "prFilter": undefined,
      "prTitle": "[{targetBranch}] {commitMessages}",
      "pullNumber": undefined,
      "repoName": "backport-demo",
      "repoOwner": "elastic",
      "resetAuthor": false,
      "sha": undefined,
      "sourceBranch": "master",
      "sourcePRLabels": Array [],
      "targetBranchChoices": Array [
        Object {
          "checked": false,
          "name": "6.0",
        },
        Object {
          "checked": false,
          "name": "5.9",
        },
      ],
      "targetBranches": Array [],
      "targetPRLabels": Array [],
      "username": "sqren",
      "verbose": false,
    },
  ],
  Array [
    "[INFO] POST https://api.github.com/graphql (status: 200)",
    undefined,
  ],
  Array [
    "[VERBOSE] Query:",
    "
    query getIdByLogin($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
  ],
  Array [
    "[VERBOSE] Variables:",
    Object {
      "login": "sqren",
    },
  ],
  Array [
    "[DEBUG] Response headers:",
    Object {
      "custom-header": "foo",
    },
  ],
  Array [
    "[VERBOSE] Response data:",
    Object {
      "data": Object {
        "user": Object {
          "id": "sqren_author_id",
        },
      },
    },
  ],
  Array [
    "[INFO] POST https://api.github.com/graphql (status: 200)",
    undefined,
  ],
  Array [
    "[VERBOSE] Query:",
    "
    query getCommitsByAuthorQuery(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
      $historyPath: String
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              history(
                first: $maxNumber
                author: { id: $authorId }
                path: $historyPath
              ) {
                edges {
                  node {
                    oid
                    message
                    associatedPullRequests(first: 1) {
                      edges {
                        node {
                          repository {
                            owner {
                              login
                            }
                            name
                          }
                          number
                          mergeCommit {
                            oid
                          }
                          labels(first: 50) {
                            nodes {
                              name
                            }
                          }
                          timelineItems(
                            last: 20
                            itemTypes: CROSS_REFERENCED_EVENT
                          ) {
                            edges {
                              node {
                                ... on CrossReferencedEvent {
                                  source {
                                    __typename
                                    ... on PullRequest {
                                      title
                                      state
                                      baseRefName
                                      commits(first: 20) {
                                        edges {
                                          node {
                                            commit {
                                              message
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ",
  ],
  Array [
    "[VERBOSE] Variables:",
    Object {
      "authorId": "sqren_author_id",
      "historyPath": null,
      "maxNumber": 10,
      "repoName": "backport-demo",
      "repoOwner": "elastic",
      "sourceBranch": "master",
    },
  ],
  Array [
    "[DEBUG] Response headers:",
    Object {
      "custom-header": "foo",
    },
  ],
  Array [
    "[VERBOSE] Response data:",
    Object {
      "data": Object {
        "repository": Object {
          "ref": Object {
            "target": Object {
              "history": Object {
                "edges": Array [
                  Object {
                    "node": Object {
                      "associatedPullRequests": Object {
                        "edges": Array [],
                      },
                      "message": "Add ðŸ‘»",
                      "oid": "2e63475c483f7844b0f2833bc57fdee32095bacb",
                    },
                  },
                  Object {
                    "node": Object {
                      "associatedPullRequests": Object {
                        "edges": Array [
                          Object {
                            "node": Object {
                              "labels": Object {
                                "nodes": Array [
                                  Object {
                                    "name": "my-label-b",
                                  },
                                ],
                              },
                              "mergeCommit": Object {
                                "oid": "f3b618b9421fdecdb36862f907afbdd6344b361d",
                              },
                              "number": 85,
                              "repository": Object {
                                "name": "kibana",
                                "owner": Object {
                                  "login": "elastic",
                                },
                              },
                              "timelineItems": Object {
                                "edges": Array [],
                              },
                            },
                          },
                        ],
                      },
                      "message": "Add witch (#85)",
                      "oid": "f3b618b9421fdecdb36862f907afbdd6344b361d",
                    },
                  },
                  Object {
                    "node": Object {
                      "associatedPullRequests": Object {
                        "edges": Array [
                          Object {
                            "node": Object {
                              "labels": Object {
                                "nodes": Array [
                                  Object {
                                    "name": "my-label-a",
                                  },
                                ],
                              },
                              "mergeCommit": Object {
                                "oid": "79cf18453ec32a4677009dcbab1c9c8c73fc14fe",
                              },
                              "number": 80,
                              "repository": Object {
                                "name": "kibana",
                                "owner": Object {
                                  "login": "elastic",
                                },
                              },
                              "timelineItems": Object {
                                "edges": Array [
                                  Object {
                                    "node": Object {
                                      "source": Object {
                                        "__typename": "PullRequest",
                                        "baseRefName": "6.3",
                                        "commits": Object {
                                          "edges": Array [
                                            Object {
                                              "node": Object {
                                                "commit": Object {
                                                  "message": "Add SF mention (#80)

* Add SF mention

* Add several emojis!",
                                                },
                                              },
                                            },
                                          ],
                                        },
                                        "state": "MERGED",
                                        "title": "some title",
                                      },
                                    },
                                  },
                                ],
                              },
                            },
                          },
                        ],
                      },
                      "message": "Add SF mention (#80)

* Add SF mention

* Add several emojis!",
                      "oid": "79cf18453ec32a4677009dcbab1c9c8c73fc14fe",
                    },
                  },
                  Object {
                    "node": Object {
                      "associatedPullRequests": Object {
                        "edges": Array [],
                      },
                      "message": "Add backport config",
                      "oid": "3827bbbaf39914eda4f02f6940189844375fd097",
                    },
                  },
                  Object {
                    "node": Object {
                      "associatedPullRequests": Object {
                        "edges": Array [],
                      },
                      "message": "Initial commit",
                      "oid": "5ea0da550ac191029459289d67f99ad7d310812b",
                    },
                  },
                ],
              },
            },
          },
        },
      },
    },
  ],
  Array [
    "[VERBOSE] exec success 'git remote rm origin':",
    "",
  ],
  Array [
    "[INFO] exec error 'git remote rm sqren':",
    [Error: Command failed: git remote rm sqren
fatal: No such remote: 'sqren'
],
  ],
  Array [
    "[VERBOSE] exec success 'git remote add sqren https://myAccessToken@github.com/sqren/backport-demo.git':",
    "",
  ],
  Array [
    "[INFO] exec error 'git remote rm elastic':",
    [Error: Command failed: git remote rm elastic
fatal: No such remote: 'elastic'
],
  ],
  Array [
    "[VERBOSE] exec success 'git remote add elastic https://myAccessToken@github.com/elastic/backport-demo.git':",
    "",
  ],
  Array [
    "[INFO] Backporting [{\\"sourceBranch\\":\\"master\\",\\"targetBranchesFromLabels\\":[],\\"sha\\":\\"f3b618b9421fdecdb36862f907afbdd6344b361d\\",\\"formattedMessage\\":\\"Add witch (#85)\\",\\"pullNumber\\":85,\\"existingTargetPullRequests\\":[]}] to 6.0",
    undefined,
  ],
  Array [
    "[VERBOSE] exec success 'git reset --hard && git clean -d --force && git fetch elastic 6.0 && git checkout -B backport/6.0/pr-85 elastic/6.0 --no-track':",
    "HEAD is now at <COMMIT HASH> Add ðŸ‘»
",
  ],
  Array [
    "[VERBOSE] exec success 'git fetch elastic master:master --force':",
    "",
  ],
  Array [
    "[VERBOSE] exec success 'git cherry-pick f3b618b9421fdecdb36862f907afbdd6344b361d':",
    "[backport/6.0/pr-85 <COMMIT HASH>] Add witch (#85)
 Date: Thu Apr 11 00:46:08 2019 +0200
 1 file changed, 1 insertion(+), 1 deletion(-)
",
  ],
  Array [
    "[VERBOSE] exec success 'git push sqren backport/6.0/pr-85:backport/6.0/pr-85 --force':",
    "",
  ],
  Array [
    "[VERBOSE] exec success 'git checkout master && git branch -D backport/6.0/pr-85':",
    "Deleted branch backport/6.0/pr-85 (was <COMMIT HASH>).
",
  ],
  Array [
    "[INFO] Creating PR with title: \\"[6.0] Add witch (#85)\\". sqren:backport/6.0/pr-85 -> 6.0",
    undefined,
  ],
  Array [
    "[INFO] POST https://api.github.com/repos/elastic/backport-demo/pulls (status: 200)",
    undefined,
  ],
  Array [
    "[DEBUG] Response headers:",
    Object {
      "custom-header": "foo",
    },
  ],
  Array [
    "[VERBOSE] Response data:",
    Object {},
  ],
]
`;

exports[`when a single commit is backported should make correct API requests 1`] = `
Object {
  "query": "
    query getDefaultRepoBranchAndPerformStartupChecks(
      $repoOwner: String!
      $repoName: String!
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        # check whether \\"backport\\" branch exists
        ref(qualifiedName: \\"refs/heads/backport\\") {
          name
        }

        # get default branch
        defaultBranchRef {
          name
        }
      }
    }
  ",
  "variables": Object {
    "repoName": "backport-demo",
    "repoOwner": "elastic",
  },
}
`;

exports[`when a single commit is backported should make correct API requests 2`] = `
Object {
  "query": "
    query getIdByLogin($login: String!) {
      user(login: $login) {
        id
      }
    }
  ",
  "variables": Object {
    "login": "sqren",
  },
}
`;

exports[`when a single commit is backported should make correct API requests 3`] = `
Object {
  "query": "
    query getCommitsByAuthorQuery(
      $repoOwner: String!
      $repoName: String!
      $maxNumber: Int!
      $sourceBranch: String!
      $authorId: ID
      $historyPath: String
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ... on Commit {
              history(
                first: $maxNumber
                author: { id: $authorId }
                path: $historyPath
              ) {
                edges {
                  node {
                    oid
                    message
                    associatedPullRequests(first: 1) {
                      edges {
                        node {
                          repository {
                            owner {
                              login
                            }
                            name
                          }
                          number
                          mergeCommit {
                            oid
                          }
                          labels(first: 50) {
                            nodes {
                              name
                            }
                          }
                          timelineItems(
                            last: 20
                            itemTypes: CROSS_REFERENCED_EVENT
                          ) {
                            edges {
                              node {
                                ... on CrossReferencedEvent {
                                  source {
                                    __typename
                                    ... on PullRequest {
                                      title
                                      state
                                      baseRefName
                                      commits(first: 20) {
                                        edges {
                                          node {
                                            commit {
                                              message
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ",
  "variables": Object {
    "authorId": "sqren_author_id",
    "historyPath": null,
    "maxNumber": 10,
    "repoName": "backport-demo",
    "repoOwner": "elastic",
    "sourceBranch": "master",
  },
}
`;

exports[`when a single commit is backported should make correct API requests 4`] = `
Object {
  "base": "6.0",
  "body": "Backports the following commits to 6.0:
 - Add witch (#85)",
  "head": "sqren:backport/6.0/pr-85",
  "title": "[6.0] Add witch (#85)",
}
`;
